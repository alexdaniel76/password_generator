# Генератор пароля
# Выбор исключение дублирования
# Выбор длины пароля от минимального 4 до 128
# Пользовательский вариант выбор алфавита, цифр и символов
# Не повторяемость символов

# Импорт генерация случайных чисел (модуль random)
import random


def duplication_length():  # Выбор длины без дублирования символов
    """
    Эта функция позволяет пользователю выбирать длину пароля без дублирования символов.
    Минимальная длина пароля составляет 4 символа, а максимальная длина равна длине строки "pass_base".

    Input:
    None

    Output:
    int: выбранная длина пароля

    Объяснение:
    Функция использует цикл while для непрерывного запроса пользователя на выбор длины пароля.
    Выбранная длина затем вводится пользователем в виде целого числа.
    Если введенная длина меньше 4 или больше длины строки "pass_base", отображается сообщение об ошибке и запрос повторяется.
    Если введенная длина допустима, она возвращается в качестве выходных данных функции.
    """
    while True:
        print("Выберите длину пароля. Минимальная длина 4 символа, максимальная длина", len(pass_base), "символов")
        pass_length = int(input("Длина: "))
        if pass_length > len(pass_base) or pass_length < 4:
            print("Неверно выбрана длина пароля! ")
        else:
            return pass_length


def select_length():  # Выбор длины с дублированием символов
    """
    Эта функция позволяет пользователю выбрать длину пароля, который будет сгенерирован.
    Минимальная длина пароля составляет 4 символа, а максимальная - 128 символов.
    Если выбранная длина выходит за пределы этого диапазона, отображается сообщение об ошибке
    и пользователю предлагается выполнить повторный выбор.

    Returns:
    int: Длина выбранного пароля в диапазоне от 4 до 128.

    """
    while True:
        print("Выберите длину пароля. Минимальная длина 4 символа, максимальная длина 128 символов")
        pass_length = int(input("Длина: "))
        if pass_length > 128 or pass_length < 4:
            print("Неверно выбрана длина пароля! ")
        else:
            return pass_length


def generate_no_duplication(pass_length, pass_base):  # Генерация пароля без дублированием символов
    """
    Эта функция генерирует пароль заданной длины без дублирования символов.
    Он принимает два аргумента: `pass_length` и `pass_base`. `pass_length` - это целое число, представляющее
    желаемую длину пароля, а `pass_base` - это список целых чисел, представляющих кодовые точки символов
    в Юникоде, которые будут использоваться в пароле.

    Функция случайным образом выбирает символ из `pass_base` и добавляет его в новый список `user_password`.
    Затем выбранный символ удаляется из `pass_base`, чтобы гарантировать отсутствие дубликатов.
    Этот процесс продолжается до тех пор, пока `user_password` не достигнет желаемой длины `pass_length`.
    Затем список `user_password` объединяется в строку и выводится пользователю.

    Аргументы:
    pass_length (int): Желаемая длина пароля.
    pass_base (list): Список целых чисел, представляющих кодовые точки символов в Юникоде, которые будут использоваться в
    пароле.

    Возвращается:
    str: Сгенерированный пароль заданной длины без дублирования символов.
    """
    user_password = []
    for i in range(pass_length):
        num = random.choice(pass_base)  # Получить случайный элемент из списка
        pass_base.remove(num)  # Удаление элемента из списка
        num = chr(num)  # Преобразует число в символ Юникод
        user_password.append(num)  # Добавляем случайный символ в новый список

    user_password = "".join(user_password)
    print("Пароль: ", user_password)
    return


def generate_with_duplication(pass_length, pass_base):  # Генерация пароля с дублированием символов
    """
    Эта функция генерирует пароль заданной длины без дублирования символов. Он принимает
    два аргумента: `pass_length` и `pass_base`. `pass_length` - это целое число, представляющее желаемую
    длину пароля, а `pass_base` - это список целых чисел, представляющих кодовые точки символов в Юникоде,
    которые будут использоваться в пароле.

    Функция случайным образом выбирает символ из `pass_base` и добавляет его в новый список `user_password`.
    Затем выбранный символ удаляется из `pass_base`, чтобы гарантировать отсутствие дубликатов. Этот процесс
    продолжается до тех пор, пока `user_password` не достигнет желаемой длины `pass_length`. Затем
    список `user_password` объединяется в строку и выводится пользователю.

    Аргументы:
    pass_length (int): Желаемая длина пароля.
    pass_base (list): Список целых чисел, представляющих кодовые точки символов в Юникоде, которые будут использоваться в пароле.

    Возвращается:
    str: Сгенерированный пароль заданной длины без дублирования символов.

    Example:
    >>> generate_no_duplication(5, [97, 98, 99, 100, 101])
    Пароль: abcde
    'abcde'
    """
    user_password = []
    for i in range(pass_length):
        num = random.choice(pass_base)  # Получить случайный элемент из списка
        num = chr(num)  # Преобразует число в символ Юникод
        user_password.append(num)  # Добавляем случайный символ в новый список

    user_password = "".join(user_password)
    print("Пароль: ", user_password)
    return


# Создаем списки для разных видов паролей и пустой пользовательский
pass_little = [i for i in range(97, 123)]
pass_big = [i for i in range(65, 91)]
pass_numbers = [i for i in range(48, 58)]
pass_symbols = (
    [i for i in range(33, 48)] + [i for i in range(58, 66)] + [i for i in range(91, 97)] + [i for i in range(123, 127)]
)
user_password = []

print("Генератор безопасных паролей.")

while True:  # Основной цикл
    pass_base = []  # Пустая переменная для символов
    print("Выберете состав пароля")
    pass_type = str(input("- Пароль включает строчные символов (abc...)? (Д / Н): "))
    if pass_type == "Д" or pass_type == "д":
        pass_base += pass_little

    pass_type = str(input("- Пароль включает прописные символов (ABC...)? (Д / Н): "))
    if pass_type == "Д" or pass_type == "д":
        pass_base += pass_big

    pass_type = str(input("- Пароль включает числа (123...)? (Д / Н): "))
    if pass_type == "Д" or pass_type == "д":
        pass_base += pass_numbers

    pass_type = str(input("- Пароль включает специальные символы (! @ # ...)? (Д / Н): "))
    if pass_type == "Д" or pass_type == "д":
        pass_base += pass_symbols

    if pass_base == []:  # Проверяем выбрали символы
        print("Не выбраны символы для пароля!")
        continue

    dupl = str(input("Выбрать пароля без дублирования символов (Д / Н)? "))
    if dupl == "Д" or dupl == "д":
        pass_length = duplication_length()  # Выбор длины с исключение дублирования
        generate_no_duplication(pass_length, pass_base)
    #        break
    elif dupl == "Н" or dupl == "н":
        pass_length = select_length()
        generate_with_duplication(pass_length, pass_base)
    #        break
    else:
        print("Не верный ответ!")

    # Запрос на выход
    exit = input("Хотите закрыть программу? (Д / Н)) ")
    if exit == "Н" or exit == "н":
        continue
    else:
        break
